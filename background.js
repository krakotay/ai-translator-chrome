// background.js
console.log('üîÑ background service worker started');

chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
  console.log('üõ∞Ô∏è background received message', msg);

  if (msg.type !== 'translate-via-gemma') {
    // –Ω–µ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç ‚Äî –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    return;
  }

  // –≥–æ–≤–æ—Ä–∏–º Chrome: –¥–µ—Ä–∂–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ sendResponse
  const url = 'http://localhost:7860/v1/chat/completions';
  const body = JSON.stringify({
    model: 'gemma-3-12B-it-qat-GGUF',
    messages: [
      {
        role: 'user',
        content: `–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç\n\`\`\`\n${msg.text}\n\`\`\`\n–ù–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –¢–µ–∫—Å—Ç –≤ MD-–±–ª–æ–∫–µ.`
      }
    ],
    max_tokens: 512,
    temperature: 0.0
  });

  fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body
  })
  .then(resp => {
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    return resp.json();
  })
  .then(json => {
    const raw = json.choices?.[0]?.message?.content?.trim() || 'üö´ –û—à–∏–±–∫–∞';
    const match = raw.match(/```[^\n]*\n([\s\S]*?)```/);
    const translated = match ? match[1].trim() : raw;
    sendResponse({ success: true, translated });
  })
  .catch(err => {
    console.error('‚ö†Ô∏è background fetch failed', err);
    sendResponse({ success: false, error: err.message });
  });

  // –≤–∞–∂–Ω–æ! –≤–µ—Ä–Ω—É—Ç—å true –°–†–ê–ó–£, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ then/catch
  return true;
});
